INTRO

section covers:
    Class-Based Views
    Generic Views
    Viewsets
    Routers
    Searching, filtering, and paginations

CLASS BASED VIEWS
    - all previous views were function-Based
    - class-based views have alot of benefits

    - import module
        from rest_framework.views import APIView

    - this class is created using the APIView inheritance and the body of the Product list function
    class ProductList(APIView):
        def get(self, request):
            queryset = Product.objects.select_related('collection').all()
            serializer = ProductSerializer(queryset, many=True, context={'request': request}) # can receive a queryset - to iterate over query, use many
            return Response(serializer.data)       # instead of HttpResponse - use Response
        
        def post(self, request):
            serializer = ProductSerializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            #serializer.save()                           # method for collecting data from dictionary - no need to use .validated_data()
            return Response(serializer.data, status=status.HTTP_201_CREATED)

    - the new view must be added to the store urls.py
        path('products/', views.ProductList.as_view()), #as_view converts class to a function view

created new class for ProductDetail

class ProductDetail(APIView):
    
    def get(self, request, id):
        product = get_object_or_404(Product, pk=id)
        serializer = ProductSerializer(product) # converts the product object into a dictionary
        return Response(serializer.data)
    
    def put(self, request, id):
        product = get_object_or_404(Product, pk=id)
        serializer = ProductSerializer(product, data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data)
    
    
    def delete(self, request, id):
        product = get_object_or_404(Product, pk=id)
        if self.product.orderitems.count() > 0:
            return Response({'error': 'Product associated with order item'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)
        product.delete()                                    # simple delete method
        return Response(status=status.HTTP_204_NO_CONTENT)


MIXINS

Basic building blocks for generic class based views.
    - i had to reformat my settings, pylance was not working at first. i disabled it, then re-enabled,
        turned on type checking, added "Jedi" language settings
        - its working now

    - i can use go to definition to pull up a class example from a module
        - is pulled directly form library
        C:\Users\force\.virtualenvs\storefront2-CcyGX6G-\lib\site-packages\rest_framework\mixins.py

    - mixin exampmle
    class ListModelMixin:
    """
    List a queryset.
    """
    def list(self, request, *args, **kwargs):
        queryset = self.filter_queryset(self.get_queryset())

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

GENERIC VIEWS
    - Generic views are classes that combine one or more mixins
        - includes handler methods that are inherited from the mixin classes included

    - there are multiple types of generic views

class ListCreateAPIView(mixins.ListModelMixin,
                        mixins.CreateModelMixin,
                        GenericAPIView):
    """
    Concrete view for listing a queryset or creating a model instance.
    """
    def get(self, request, *args, **kwargs):            # inherits from ListModelMixin
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):           # inherits from CreateModelMixin
        return self.create(request, *args, **kwargs)


    - using the ListCreateAPIView inheritance
        - overriding values and replacing the functions which are not needed
            - eg. get_queryset and get_serializer_class
            - functions can be used if more specific operations need to be done

    class ProductList(ListCreateAPIView):
    queryset = Product.objects.select_related('collection').all()   # override queryset value - GenericAPIView
    serializer_class = ProductSerializer                            # override serializer_class - GenericAPIView

    def get_queryset(self):
        return Product.objects.select_related('collection').all()

    def get_serializer_class(self):
        return ProductSerializer

    def get_serializers_context():
        return {'request': self.request}


    - generic views also give additional benefits through the browsable API
        - an html form or json template when creating a product


    - setting up the CollectionList class is much easier now
        class CollectionList(ListCreateAPIView):
            queryset = Collection.objects.annotate(
                products_count=Count('products')).all()
            serializer_class = CollectionSerializer

    - Note: fields that should not be edited can be marked read_only when creating a serializer field
        CollectionSerializer
            products_count = serializers.IntegerField(read_only=True) #collection class does not have this field, defined it here

CUSTOMIZING GENERIC VIEWS

in implementation of details using APIView inheritance
    - overriding methods is sometimes necessary - overriding delete method below

class ProductDetail(RetrieveUpdateDestroyAPIView):  # updated this class using RetrieveUpdateDestroyAPIView
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    
    
    def delete(self, request, id):                      # method requires knowledge of models - overriding inherited method with the code here
        product = get_object_or_404(Product, pk=id)
        if self.product.orderitems.count() > 0:
            return Response({'error': 'Product associated with order item'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)
        product.delete()                                    # simple delete method
        return Response(status=status.HTTP_204_NO_CONTENT)

    - also lookup values can be overriden like this
        lookup_field = 'id'


    - updated CollectionDetail class
        class CollectionDetail(RetrieveUpdateDestroyAPIView):
            queryset = Collection.objects.annotate(
                products_count=Count('products')).all()
            serializer_class = CollectionSerializer

            def delete(self, request, pk):
                collection = get_object_or_404(Collection, pk=pk)
                if collection.products.count() > 0:
                    return Response({'error': 'One or more products exist.'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)
                collection.delete()
                return Response(status=status.HTTP_204_NO_CONTENT)


VIEW SETS


    class ModelViewSet(mixins.CreateModelMixin,
                   mixins.RetrieveModelMixin,
                   mixins.UpdateModelMixin,
                   mixins.DestroyModelMixin,
                   mixins.ListModelMixin,
                   GenericViewSet):
    """
    A viewset that provides default `create()`, `retrieve()`, `update()`,
    `partial_update()`, `destroy()` and `list()` actions.
    """
    pass

    - below created a single class for product viewset - the former list and details classes functions are combined
        - urls must be reformatted

class ProductViewset(ModelViewSet):     # also possible to inherit from ReadOnlyModelViewSet - which allows only read only operations
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def get_serializers_context():
        return {'request': self.request}


    def delete(self, request, pk):                      # method requires knowledge of models - overriding inherited method with the code here
        product = get_object_or_404(Product, pk=pk)
        if self.product.orderitems.count() > 0:
            return Response({'error': 'Product associated with order item'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)
        product.delete()                                    # simple delete method
        return Response(status=status.HTTP_204_NO_CONTENT)

NOTE:
    - delete function needed to be updated since the classes have been combined
        - now  using the destroy function from the DestroyModelMixin

        def destroy(self, request, *args, **kwargs):
        if OrderItem.objects.filter(product_id=kwargs['pk']).count() > 0:
            return Response({'error': 'Product associated with order item'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)

        return super().destroy(request, *args, **kwargs)


        def destroy(self, request, *args, **kwargs):
        if collection.products.count() > 0:
            return Response({'error': 'One or more products exist.'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)
        collection.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

ROUTERS

Routers provide a convenient and consistent way of automatically
determining the URL conf for your API.

They are used by simply instantiating a Router class, and then registering
all the required ViewSets with that router.

    - there is some regular expression work on the backend side
    - mixins are doing alot of the work now

    - the router will generate two url patterns automatically
        - list and details

from rest_framework.viewsets import ModelViewSet, ReadOnlyModelViewSet

router = DefaultRouter()                                            # gives an API Root endpoint - accessible at /store
router.register('products', viewset=views.ProductViewSet)
router.register('collections', viewset=views.CollectionViewSet)


# URLConf
urlpatterns = router.urls



BUILDING REVIEWS API
    - making reviews for model objects

    needs:
        model class
        migration
        apply migration

    build api:
        serializer
        view
        register route (router or explicit url pattern)

    - models

class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.Case, related_name='reviews')
    name = models.CharField(max_length=255)
    description = models.TextField()
    date = models.DateField(auto_now_add=True)


class ReviewViewSet(ModelViewSet):
    serializer_class = ReviewSerializer

    def get_queryset(self):
        return Review.objects.filter(product_id=self.kwargs['product_pk'])

    def get_serializer_context(self):
        return{'product_id': self.kwargs['product_pk']}


NESTED ROUTERS




router = routers.DefaultRouter()                                            # gives an API Root endpoint - accessible at /store
router.register('products', viewset=views.ProductViewSet)
router.register('collections', viewset=views.CollectionViewSet)

products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')
products_router.register('reviews', views.ReviewViewSet, basename='product-reviews')

# URLConf
urlpatterns = router.urls + products_router.urls


class ReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = Review
        fields = ['id', 'date', 'name', 'description',]

    def create(self, validated_data):
        product_id = self.context['product_id']
        Review.objects.create(product_id=product_id, **validated_data)


FILTERING

    - implemented filtering on ProductViewset

    def get_queryset(self):
        queryset = Product.objects.all()
        collection_id = self.request.query_params.get('collection_id')  #query_params is a dictionary
        if collection_id is not None:
            queryset = queryset.filter(collection_id=collection_id)
        
        return queryset



GENERIC FILTERING

    - gives access to generic filtering
    from django_filters.rest_framework import DjangoFilterBackend


    - could not get generic filtering to work
        "unsupported lookup 'e' for field 'store.Product.collection'" 

SEARCHING, SORTING, PAGINATION

    - all of these tools go inside viewset class

-Searching

from rest_framework.filters import SearchFilter

search_fields = ['title', 'description', 'collection__title']


-Sorting

from rest_framework.filters import  OrderingFilter


    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]       # updated list of filter_backends
    ordering_fields = ['unit_price', 'last_update']


-Pagination

from rest_framework.pagination import PageNumberPagination

    pagination_class = PageNumberPagination         # individual view pagination

    -alternatively: can set default pagination
        - this goes in the settings tab
        
        REST_FRAMEWORK = {
            'COERCE_DECIMAL_TO_STRING': False,       # prevents decimal fields from being converted to string
            'PAGE_SIZE': 10
        }

    - i setup an app for for pagination (pagination.py)
        from rest_framework.pagination import PageNumberPagination

        class DefaultPagination(PageNumberPagination):
            page_size = 10

        - in views.py
             pagination_class = DefaultPagination

            - add the import: from .filters import ProductFilter

        - removed pagination details from settings